##
1 this.setState方法是异步的，如同setTimeout，既要等同一作用域它后面的代码执行完毕后，他才执行，如果想条用完setState后立马可以获取到最新的state值，
可以setState({}, callback)；setState的第二个参数，是在setState异步执行结束且组件已经重新渲染的时候触发执行
setState会根据一个变量isBatchUpdate来判断是立即更新state，还是放到队列中回头再说；【由react控制的事件处理过程，setState不会更新更新state， 而在react控制之外的
则会同步更新state； 所以说setState不能一定说就是异步的】

2 setState((prevState, props) => {}) 第一个参数prevState表示更新前的state值，props表示当前更新的值

3 调用setState方法后，会将需要更新的state值放入到状态队列中，而且也只有在调用setState方法时，才会存入队列

4 在含有构造函数的react组件中，构造函数必须以super(props)开始

5 每次在组件中调用setState，都会更新其子组件

6 如果两个组件需要通讯，可以使用【状态提升】，将状态或是需要通讯的数据置于共同的父组件保存，之后父组件再通过props属性，传递给子组件

7 如果组件中没有私有状态state（state对于每一个组件来说都是私有的），可以删除掉构造函数

8 在react中，有一个命名规范，通常将代表事件监听的prop命名为on[EventName], 将处理事件的监听方法命名为handle[EventName]

9 数据不可变性的必须性， 1）简化复杂的功能，实现时间旅行，如游戏中的悔棋，返回上一步，撤销和回复功能等 2）跟踪数据的变化 		 3）确定react在何时重新渲染，【不可变性的最主要的优势在于在react中创建pure component】，可以非常容易的判断数据是否发生了变化，从而确定何时对组件重渲染

+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
| 1 Purecomponent相较于component，除了提供浅比较的shoudComponentUpdate，其他基本一样
| 如下两种问题：
| 1）在组件调用的时候，动态传入一个函数，<ComponnetItem props={() => {this.XXX}} />, 每次调用该组件时，都会创建一个新的函数，会导致子组件全都重新渲染 
| 2）在render方法中派生新的数据，也会导致子组件的重新渲染
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

10 复制一个函数 var arr_copy = arr.slice();

11 react中的key属性，首先是react保留的属性，不能通过this.props.key来获取到
  key的作用在于确定组件列表是否更新时使用

12 通过useState拥有局部状态，在重用的过程中，这些状态会得到保留；如果不重用，则状态会销毁  
